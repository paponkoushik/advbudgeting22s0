{% extends 'partials/variables.html.twig' %}

{% set module = page.header.module %}

{% block render_block %}

	<div class="feature-section " style="{% if(bg) %}background-image: url('{{ bg }}'){% endif %}">
		<div class="container">

			<div class="feature-wrapper">
				<div class="features-header-section">
					{% if module.sub_title %}
						<p class="sub-title">
							{{ module.sub_title.translatable|striptags('<span>')|raw }}
							<svg width="14" height="14" viewbox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
								<rect width="14" height="14" rx="2" fill="#FB4D17"/>
							</svg>

						</p>
					{% endif %}

					{% if module.title %}
						<h3 class="title section-title">{{ module.title.translatable|striptags('<span>')|raw }}</h3>
					{% endif %}

					{# <div class="description">
					                        {% if page.content %}
					                            {{ page.content|raw }}
					                        {% endif %}
					                    
					                    </div>				 #}
				</div>

				<div class="features-content-wrapper">

					{% set features = page.header.feature_blocks %}
					{% set features_first_row = page.header.feature_blocks[:3] %}
					{% set features_second_row = page.header.feature_blocks[3:] %}

					{% for feature_block in features_first_row %}
						{% if feature_block.description != '' and feature_block.title != '' %}

							<div class="feature-item">
								{% set image = page.media[feature_block.image] %}

								<div class="feature-image">
									<img class="" src="{{ image.url }}"/>
								</div>

								{# <hr> #}

								<div class="feature-content">
									<h4 class="feature-title">{{ feature_block.title.translatable }}</h4>
									<p class="feature-description">{{ feature_block.description.translatable }}</p>

								</div>
							</div>

						{% endif %}
					{% endfor %}

					{% for feature_block in features_second_row %}
						{% if feature_block.description != '' and feature_block.title != '' %}

							<div class="feature-item second-row-item-hide">
								{% set image = page.media[feature_block.image] %}

								<div class="feature-image">
									<img class="" src="{{ image.url }}"/>
								</div>

								<hr>

								<div class="feature-content">
									<h4 class="feature-title">{{ feature_block.title.translatable }}</h4>
									<p class="feature-description">{{ feature_block.description.translatable }}</p>

								</div>
							</div>

						{% endif %}
					{% endfor %}

				</div>

				<div class="video-container">
				{# Autoplay muted loop playsinline  #}
					<video id="myVideo" muted playsinline loop class="lazy-video" width="100%" preload="none" poster="{{ url('theme://images/video-poster.png') }}" data-src="{{ url('theme://images/video.mp4') }}"></video>
					{# <button class="play-button">â–¶</button> #}
				</div>

			</div>
		</div>

	</div>

	{# <script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('myVideo');

    const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
            if (!video.src && video.dataset.src) {
                video.src = video.dataset.src;
                video.load();
            }
            
            video.play().catch(error => {
                console.error('Autoplay failed:', error);
            });
        } else {
            video.pause();
        }
    }, { threshold: 0.7 });

    observer.observe(video);

    video.addEventListener('click', () => {
        if (video.paused) {
            video.play();
        } else {
            video.pause();
        }
    });

    video.addEventListener('mouseenter', () => {
        if (!video.paused) {
            video.style.cursor = 'pointer';
        }
    });

    video.addEventListener('mouseleave', () => {
        video.style.cursor = 'default';
    });
});
</script> #}

{# <script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('myVideo');

    const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
            if (!video.src && video.dataset.src) {
                video.src = video.dataset.src;
                video.load();
            }
            
            video.play().catch(error => {
                console.error('Autoplay failed:', error);
            });
        } else {
            video.pause();
        }
    }, { threshold: 0.7 });

    observer.observe(video);

    // Add ended event listener to restart video when it finishes
    video.addEventListener('ended', () => {
        video.currentTime = 0; // Rewind to start
        video.play().catch(error => {
            console.error('Autoplay failed:', error);
        });
    });

    video.addEventListener('click', () => {
        if (video.paused) {
            video.play();
        } else {
            video.pause();
        }
    });

    video.addEventListener('mouseenter', () => {
        if (!video.paused) {
            video.style.cursor = 'pointer';
        }
    });

    video.addEventListener('mouseleave', () => {
        video.style.cursor = 'default';
    });
});
</script> #}

<script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('myVideo');
    
    // Essential settings for autoplay
    video.muted = true; // Required for autoplay
    video.playsInline = true; // For iOS
    video.loop = true;
    video.preload = 'metadata'; // Optimized lazy loading

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Lazy load if needed
                if (!video.src && video.dataset.src) {
                    video.src = video.dataset.src;
                    video.load();
                }
                
                // Attempt to play (no fallback button)
                video.play().catch(error => {
                    console.log('Autoplay blocked (normal on mobile):', error);
                });
            } else {
                video.pause();
            }
        });
    }, { 
        threshold: 0.7,
        rootMargin: '0px 0px -50px 0px' // Triggers slightly early
    });

    observer.observe(video);

    // Optional: Click to play/pause (remove if unwanted)
    video.addEventListener('click', () => {
        if (video.paused) video.play();
        else video.pause();
    });
});
</script>
{% endblock %}
